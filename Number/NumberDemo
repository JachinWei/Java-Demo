package com.wyg.test;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.Random;
import java.util.Scanner;

//对数字的操作
public class NumberDemo {

	//Math工具类的演示
	public void math(){
		System.out.println(Math.abs(-1));// == 1
		System.out.println(Math.floor(1.5));// == 1.0  向下取整
		System.out.println(Math.round(1.4));// == 1  四舍五入
		System.out.println(Math.round(1.5));// == 2  四舍五入
		System.out.println(Math.max(17, 11));// == 1 取最大值
		System.out.println(Math.min(17, 11));// == 1 取最小值
	}
	
	//Random类的演示
	public void random(){
		int i = 10;
		while(i>0){
			i--;
			System.out.print(new Random().nextInt() + ",");//随机返回int范围内的任意int类型值
		}
		System.out.println();
		i = 10;
		while(i>0){
			i--;
			System.out.print(new Random().nextInt(100) + ",");//随机返回0 ~100范围内的任意int值
		}
		
	}
	
	//NumberFormat数值格式的抽象基类
	public void numberFormat(){
		Double myNumber=23323.3323232323;
		Double test=0.3434;
		//返回当前缺省语言环境的缺省数值格式。
		String myString = NumberFormat.getInstance().format(myNumber);
		System.out.println("默认数值格式：" + myString);
		
		//返回当前缺省语言环境的通用格式
		myString = NumberFormat.getCurrencyInstance().format(myNumber); 
		System.out.println("通用数值格式：" + myString);
		  
		//getPercentInstance()  返回当前缺省语言环境的百分比格式。
		myString = NumberFormat.getPercentInstance().format(test); 
		System.out.println("百分比格式：" + myString);
		
		NumberFormat format = NumberFormat.getInstance();
		//设置数值的小数部分允许的最大位数, 四舍五入
		format.setMinimumFractionDigits(3);
		//setMinimumFractionDigits(int) 设置数值的小数部分允许的最小位数。 
		format.setMaximumIntegerDigits(3);
		System.out.println(format.format(2132323213.23));
		System.out.println(format.format(2132323213.23266));
	}
	
	//浮点数格式化演示 - DecimalFormat
	public void decimalFormat(){
		DecimalFormat df1 = new DecimalFormat("0.0");   
		DecimalFormat df2 = new DecimalFormat("#.#");   
		DecimalFormat df3 = new DecimalFormat("000.000");   
		DecimalFormat df4 = new DecimalFormat("###.###");   
		System.out.println(df1.format(12.34));   
		System.out.println(df2.format(12.34));   
		System.out.println(df3.format(12.34));   
		System.out.println(df4.format(12.34)); 
		
		DecimalFormat format = new DecimalFormat("###,####.000");   
		System.out.println(format.format(111111123456.1227222));   
		  
		Locale.setDefault(Locale.US);   
		DecimalFormat usFormat = new DecimalFormat("###,###.000");   
		System.out.println(usFormat.format(111111123456.1227222));   
		  
		DecimalFormat addPattenFormat = new DecimalFormat();   
		addPattenFormat.applyPattern("##,###.000");   
		System.out.println(addPattenFormat.format(111111123456.1227));   
		  
		DecimalFormat zhiFormat = new DecimalFormat();   
		zhiFormat.applyPattern("0.###E0##"); //注意0不能够放在#后面  
		System.out.println(zhiFormat.format(10000));   
		System.out.println(zhiFormat.format(12345678.345));   
		  
		DecimalFormat percentFormat = new DecimalFormat();   
		percentFormat.applyPattern("#0.000%");   
		System.out.println(percentFormat.format(0.3052222));  
	}

	//大数演示 - BigInteger
	public void bigInteger(){
		int a=3;
		BigInteger b=BigInteger.valueOf(a);//将参数转换为制定的类型 b = 3

		String s="1117";
		BigInteger c=BigInteger.valueOf(Long.parseLong(s));//结果 c = 1117

		BigInteger d=new BigInteger("23");
		BigInteger e=new BigInteger("32");
		d.add(e);//大整数相加

//		3.subtract(); 相减
//		4.multiply(); 相乘
//		5.divide(); 相除取整
//		6.remainder(); 取余
//		7.pow(); a.pow(b)=a^b
//		8.gcd(); 最大公约数
//		9.abs(); 绝对值
//		10.negate(); 取反数
//		11.mod(); a.mod(b)=a%b=a.remainder(b);
//		12.max(); min();
//		13.punlic int comareTo();
//		14.boolean equals(); 是否相等
//		15.BigInteger构造函数：
//		一般用到以下两种：
//		BigInteger(String val);
//		将指定字符串转换为十进制表示形式；
//		BigInteger(String val,int radix);
//		将指定基数的 BigInteger 的字符串表示形式转换为 BigInteger
//		Ⅱ.基本常量：
//		A=BigInteger.ONE 1
//		B=BigInteger.TEN 10
//		C=BigInteger.ZERO 0
//		Ⅲ.基本操作
//		1. 读入：
//		用Scanner类定义对象进行控制台读入,Scanner类在java.util.*包中
		Scanner cin=new Scanner(System.in);// 读入
		while(cin.hasNext()) //等同于!=EOF
		{
			int n;
			BigInteger m;
			n=cin.nextInt(); //读入一个int;
			m=cin.nextBigInteger();//读入一个BigInteger;
			System.out.print(m.toString());
		}
		 
		
//		if( a.compareTo(b) == 0 ) System.out.println("a == b"); //大整数a==b
//		else if( a.compareTo(b) > 0 ) System.out.println("a > b"); //大整数a>b
//		else if( a.compareTo(b) < 0 ) System.out.println("a < b"); //大整数a<b
		//大整数绝对值
	}
	
//	 1、用float或者double变量构建BigDecimal对象。
//     2、通过调用BigDecimal的加，减，乘，除等相应的方法进行算术运算。
//     3、把BigDecimal对象转换成float，double，int等类型。
	public void bigDecimal(){
		BigDecimal b1 = new BigDecimal(Double.toString(0.48));
		BigDecimal b2 = BigDecimal.valueOf(0.48);
		System.out.println(b1);
		System.out.println(b2);
		System.out.println(b1.subtract(b2).doubleValue());
		System.out.println(b1.add(b2).doubleValue());
	}
	
	
	public static void main(String[] args) {
		NumberDemo nd = new NumberDemo();
		nd.bigDecimal();
	}

}
