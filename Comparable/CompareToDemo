package com.wyg.test;

import java.util.Arrays;
import java.util.Comparator;

public class CompareToDemo {
	public static void main(String[] args) {
		Student[] stu = { new Student("第一号", 17), new Student("第二号", 11), new Student("第三号", 14) };
		
		 System.out.println("排序前");
		 Student.output(stu);
		 System.out.println("排序后");
		// 有使用Comparable接口
		// Arrays.sort(stu);
		//验证Comparator接口
		 Arrays.sort(stu, new StudentComparaTo());
		 Student.output(stu);
	}
}

// 开发过程中为类实现接口Comparable<Student>来实现比较
class Student implements Comparable<Student> {
	private String name;
	private int score;

	Student() {
		super();
	}

	Student(String name, int score) {
		this.name = name;
		this.score = score;
	}

	public String getName() {
		return name;
	}

	public int getScore() {
		return score;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj != null) {
			if (this == obj) {
				return true;
			}
			if (!(obj instanceof Student)) {
				return false;
			}
			Student stu = (Student) obj;// 向下转型
			if (stu.getName().equals(this.getName()) && stu.getScore() == this.getScore()) {
				return true;
			} else {
				return false;
			}
		}

		return false;
	}

	@Override
	public int compareTo(Student stu) {
		if (this.score > stu.score) {
			return -1;
		} else if (this.score < stu.score) {
			return 1;
		} else {
			return 0;
		}
	}

	@Override
	public String toString() {
		return "姓名：" + this.name + ", 成绩：" + this.score;
	}

	public static void output(Student[] stu) {
		for (int i = 0; i < stu.length; i++) {
			System.out.println(stu[i].toString());
		}
	}

}

// 若是开发完成了，不变修改类要添加比较器则使用Comparator接口，一般不用麻烦，作为挽救措施
class StudentComparaTo implements Comparator<Student> {
	@Override
	public boolean equals(Object obj) {
		// TODO Auto-generated method stub
		return super.equals(obj);
	}

	@Override
	public int compare(Student stu1, Student stu2) {
		if (stu1.getScore() > stu2.getScore()) {
			return -1;
		} else if (stu1.getScore() < stu2.getScore()) {
			return 1;
		} else {
			return 0;
		}
	}

}
