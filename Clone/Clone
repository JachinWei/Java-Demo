package com.wyg.test;

public class Clone implements Cloneable {
	public static void main(String[] args) {
		Student stu1 = new Student("小明", 17, "杭州市");            
		Student stu2 = (Student)stu1.clone();             
		System.out.println(stu1.toString());  
		System.out.println(stu2.toString());  
		
		stu1.setAddr("广州市");
		System.out.println("修改后");  
		System.out.println(stu1.toString());  
		System.out.println(stu2.toString());
	}  
}

//待克隆类
//1. 被复制的类需要实现Cloneable 接口
//（不实现的话在调用clone方法会抛出CloneNotSupportedException异常)， 该接口为标记接口(不含任何方法)
//2. 覆盖clone()方法，访问修饰符设为public。
//方法中调用super.clone()方法得到需要的复制对象。（native为本地方法)
class Student implements Cloneable{  
    private String name;
    private int number;
    //潜克隆只能复制引用值和基本类型值
    private Address addr;  
    
    Student(String name, int n, String addr){
    	this.name = name;
    	this.number = n;
    	this.addr = new Address();
    	this.addr.setAdd(addr);
    }
    
    public void setAddr(String addr){
    	this.addr.setAdd(addr);
    }
      
    @Override  
    public Object clone() {  
        Student stu = null;  
        try{  
            stu = (Student)super.clone();  //浅复制
        }catch(CloneNotSupportedException e) {  
            e.printStackTrace();  
        }  
        stu.addr = (Address)addr.clone();   //深度复制  
        return stu;  
    }

	@Override
	public String toString() {
		return "学生姓名：" + this.name + ", 学号：" + this.number + ", 地址：" + this.addr.getAdd();
	}  
}  

//要达到深克隆的目的，引用的类也有可克隆
class Address  implements Cloneable {  
	private String add;  
	public String getAdd() {  
		return add;  
	}  
	public void setAdd(String add) {  
		this.add = add;  
	}  
	
	@Override  
	public Object clone() {  
		Address addr = null;  
		try{  
			addr = (Address)super.clone();  
		}catch(CloneNotSupportedException e) {  
			e.printStackTrace();  
		}  
		return addr;  
	}  
}  
